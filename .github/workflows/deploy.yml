name: Deploy SPA Infrastructure

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
  CDK_DEFAULT_REGION: us-east-1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: |
          npm ci

      - name: Run tests
        run: |
          npm test

  build-frontend:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: |
          npm ci

      - name: Build frontend
        run: |
          cd sample-app
          # Copy HTML file to build directory
          mkdir -p dist
          cp index.html dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-${{ github.run_id }}

      - name: Deploy frontend to S3
        run: |
          # Get S3 bucket name from CDK outputs or use environment variable
          BUCKET_NAME="${{ github.ref == 'refs/heads/main' && 'prod-spa-static' || 'dev-spa-static' }}-${{ secrets.AWS_ACCOUNT_ID }}"
          aws s3 sync sample-app/dist/ s3://$BUCKET_NAME/ --delete

  deploy-lambda-edge:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: |
          npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1 # Lambda@Edge must be deployed to us-east-1
          role-session-name: GitHubActions-${{ github.run_id }}

      - name: Deploy Lambda@Edge function
        run: |
          # Deploy Lambda@Edge function to us-east-1
          npm run cdk deploy -- --require-approval never --context environment=${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: [build-frontend, deploy-lambda-edge]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: |
          npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-${{ github.run_id }}

      - name: Bootstrap CDK (if needed)
        run: |
          npm run cdk bootstrap -- --require-approval never

      - name: Deploy CDK stack
        run: |
          npm run cdk deploy -- --require-approval never --context environment=${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

      - name: Get deployment outputs
        run: |
          npm run cdk list
          npm run cdk describe SpaStack

  notify:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-infrastructure.result }}" == "success" ]; then
            echo "✅ Deployment completed successfully!"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi
